
//check the code
/*
 * -------------------------------------------------
 *  circPipe Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  container = 'likelet/circpipe:latest' // Container slug. Stable releases should specify release tag!

  //choose the tools
  separate = false
  merge = true
  selectTools = '1,2,3,4'

  //the necessary reference
  refdir = "/data1/wqj/database/data/testdata"
  annotationfile = "${params.refdir}/Genome/hg38_chr2_gencode.txt"
  genomefile = "${params.refdir}/Genome/chr2.fa"
  faifile = "${params.refdir}/hg38_genome.fa.fai"
  gtffile = "${params.refdir}/Genome/gencode_chr2.v25.annotation.gtf"
  bedfile = "${params.refdir}/Genome/gencode_chr2.v25.annotation.bed"
  refmapsplice = "${params.refdir}/Genome"
  mRNA = "${params.refdir}/gencode.rsem.fpkm_m6Astatus_11_29.mat"


  //reads files
  reads = "${params.refdir}/Fastq/*{1,2}.fq.gz"

  //the indexes for tools
  starindex = ""
  segindex = ""
  bowtie2index = ""
  bowtieindex = ""
  bwaindex = ""

  //the output directory
  outdir = './Result'

  //tools directory
  knifedir = '/home/wqj/tools/KNIFE/circularRNApipeline_Standalone/*'
  otherTools = "$baseDir/bin"
  Rscriptpath = '/home/yeying/miniconda3/envs/nextflow_dependency/bin'

  //files of DE
  designfile="${params.refdir}/design.file"
  comparefile="${params.refdir}/compare.file"


  singleEnd = false

  email = '513848731@qq.com'

  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'

}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container}"}
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/cirpipe_dag.svg"
}

manifest {
  name = 'nf-core/cirpipe'
  author = 'Qi Zhao(zhaoqi@sysucc.org.cn), Qijin Wei(513848731@qq.com)'
  homePage = 'https://github.com/likelet/cirpipe'
  description = 'cirRNA analysis pipe'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

